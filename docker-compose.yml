services:
  postgres:
    image: postgres:15-alpine
    container_name: ticket-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data_new:/var/lib/postgresql/data
      - ${BACKUP_PATH:-./backups}:/backups
      - .backups//backup.sql:/docker-entrypoint-initdb.d/restore.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ticket-network-new
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ticket-backend-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      PORT: 4000
      CORS_ORIGINS: https://${FRONTEND_DOMAIN}
      GRAPHQL_PLAYGROUND: "false"
      GRAPHQL_INTROSPECTION: "false"
      MAX_FILE_SIZE: 10485760
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ticket-network-new
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ticket-frontend-prod
    environment:
      NEXT_PUBLIC_API_URL: https://${BACKEND_DOMAIN}
      NEXT_PUBLIC_GRAPHQL_URL: https://${BACKEND_DOMAIN}/graphql
      NEXT_PUBLIC_APP_NAME: "Ticket System"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ticket-network-new
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '81:81'
    volumes:
      - ./npm-data:/data
      - ./npm-ssl:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    networks:
      - ticket-network-new
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M

volumes:
  postgres_data_new:
  uploads_data_new:

networks:
  ticket-network-new:
    driver: bridge